/* ==| Overall structure |=====================================================
 *
 * This CSS file only deals with layout.
 *
 * It defines global variables for anything that repeats itself,
 * e.g. margins, padding, minimum heights…
 * Then it defines rules for pseudo classes, classes, attributes, tags,
 * as well as identified elements.
 *
 * When the same rule applies to multiple elements, the rule is turned into
 * variables and applied to individual elements, so that we can list classes,
 * elements,… in lexicographic order.
**/

/* ==| Variables |=============================================================
 * We first define generic variables, e.g. for dimensions.
 * Then we assign these generic variables to different type of elements
 * (e.g. buttons).
**/
:root {
    --button-height: 1.5rem;
    --button-margin: 0.5rem;
    --button-width: 3.5rem;
    --control-height: calc( var( --button-width ) * 5 + 3rem);
    --label-height: calc( var( --button-height ) + 1rem );
    --label-width: calc( var( --button-width ) - 1rem );
    --menu-height: 3rem;
    --min-margin: 0.08rem;
    --min-padding: 0.2rem;
    --popup-gutter: 1.5rem;
    --tab-width: 2.7rem;
    --tab-height: 2.4rem;
    --tab-shift: -2.7rem;
    --tiling-height: 2.4rem;
    --tiling-shift: 2rem;
    box-sizing: border-box;
    overflow: hidden;
}

/* ==| Classes |===============================================================
 * We define classes layout first.
**/
@supports ( --classes: first ) {
    .slider-value {
        display: inline-block;
        min-width: 1rem;
        text-align: center;
    }
}

/* ==| Attributes |============================================================
 * We define attributes layout next.
**/
@supports ( --attributes: next ) {
    [type="range"] {
        max-width: calc( var( --select-width ) * 2 );
    }
}

/* ==| Tags |==================================================================
 * We then define generic tag layout.
**/
@supports ( --tags: all ) {
    body {
        display: flex;
        flex-flow: column wrap;
        justify-content: space-between;
        height: 100%;
        margin: 0;
        width: 100%;
    }

    body > :not(#frosted) {
        flex: 1 1 var( --menu-height );
        width: 100%;
    }

    canvas {
        position: absolute;
    }

    input {
        flex: 0 1 0;
        margin: var( --button-margin );
        min-width: var( --button-width );
        max-height: var( --button-height );
        white-space: nowrap;
    }

    label {
        flex: 0 1 0;
        margin: var( --button-margin );
        min-width: var( --label-width );
        max-height: var( --label-height );
        white-space: nowrap;
    }

    select {
        margin: auto;
        max-height: var( --button-height );
        min-width: var( --select-width );
        padding: var( --min-padding );
    }

    table {
        margin: auto;
        vertical-align: middle;
    }

    td select {
        padding-top: 0;
        padding-left: calc( var( --select-width ) / 3 );
    }
}

/* ==| Identified elements |===================================================
 * Last we get to specific elements
**/
@supports ( --identified-elements: all ) {
    #cancel {
        position: absolute;
        right: var( --min-padding );
    }

    #control {
        display: block flex;
        flex-flow: row wrap;
        flex: 1 1 var( --control-height );
        justify-content: space-between;
        margin: var( --min-margin );
        min-height: var( --control-height );
        overflow: auto;
    }

    #footer {
        display: flex;
        flex-flow: row wrap;
        margin-top: var( --min-margin );
        min-height: var( --menu-height );
        overflow: auto;
        padding: var( --min-padding );
    }

    #footer > div {
        flex: auto;
        justify-content: space-between;
        margin-left: var( --min-margin );
        margin-right: var( --min-margin );
        min-height: var( --menu-height );
        padding: var( --min-padding );
    }

    #frosted {
        height: 100%;
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;
        z-index: 100;
    }

    #game {
        flex: 1 1 calc( 100vmin - 3 * var( --menu-height ) );
        margin: var( --min-margin );
        min-height: calc( 100vh - 3 * var( --menu-height ) - var( --control-height ) );
        overflow: hidden;
        position: relative;
    }

    #grid-neighborhood {
        margin: auto;
        margin-bottom: var( --button-margin );
    }

    #main {
        display: flex;
        flex-flow: row wrap;
        justify-content: space-between;
        min-height: calc( 100vh - 3 * var( --menu-height ) );
    }

    #menubar {
        margin-bottom: var( --min-margin );
        min-height: var( --menu-height );
        padding: var( --min-padding );
    }

    #popup {
        bottom: var( --menu-height );
        left: 0;
        margin: auto;
        min-height: var( --control-height );
        min-width: var( --control-height );
        overflow: hidden;
        padding: var( --min-padding );
        position: absolute;
        right: 0;
        top: var( --menu-height );
        width: 50%;
    }

    #popup > div {
        bottom: var( --popup-gutter );
        display: block flex;
        flex-flow: row wrap;
        justify-content: space-between;
        left: var( --popup-gutter );
        margin: auto;
        overflow: hidden;
        position: absolute;
        right: var( --popup-gutter );
        top: var( --popup-gutter );
    }

    #settings section {
        display: block;
        bottom: 0;
        left: 0;
        padding: var( --min-padding );
        position: absolute;
        right: 0;
        top: var( --tab-height );
        z-index: 10;
    }

    #settings section h1 {
        display: inline-block;
        height: var( --tab-height );
        position: absolute;
        top: var( --tab-shift );
    }

    #settings section h1 {
        text-align: center;
        width: var( --tab-width );
    }

    #settings section h1 a {
        padding: var( --min-padding );
    }

    #settings section:nth-child(1) h1 {
        left: calc( 1 * var( --tab-width ) );
    }
    #settings section:nth-child(2) h1 {
        left: calc( 2 * var( --tab-width ) );
    }
    #settings section:nth-child(3) h1 {
        left: calc( 3 * var( --tab-width ) );
    }
    #settings section:nth-child(4) h1 {
        left: calc( 4 * var( --tab-width ) );
    }
    #settings section:nth-child(5) h1 {
        left: calc( 5 * var( --tab-width ) );
    }
    #settings section:nth-child(6) h1 {
        left: calc( 6 * var( --tab-width ) );
    }
    #settings section:nth-child(7) h1 {
        left: calc( 7 * var( --tab-width ) );
    }
    #settings section:nth-child(8) h1 {
        left: calc( 8 * var( --tab-width ) );
    }
    #settings section:nth-child(9) h1 {
        left: calc( 9 * var( --tab-width ) );
    }

    #settings section:target {
        z-index: 20;
    }


    #tiling {
        display:inline-block;
        max-height: var( --tiling-height );
        position: relative;
        top: var( --tiling-shift );
    }

    #tiling > :not(legend) {
        position: relative;
        top: calc( -0.8 * var( --tiling-shift ) );
    }

}
